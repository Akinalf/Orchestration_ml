#!/usr/bin/env python3
"""
Script pour visualiser les r√©sultats du pipeline Kedro
"""
import pickle
import json
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns

def load_pickle_file(filepath):
    """Charge un fichier pickle"""
    try:
        with open(filepath, 'rb') as f:
            data = pickle.load(f)
        return data
    except Exception as e:
        print(f"Erreur lors du chargement de {filepath}: {e}")
        return None

def load_json_file(filepath):
    """Charge un fichier JSON"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"Erreur lors du chargement de {filepath}: {e}")
        return None

def display_detection_results():
    """Affiche les r√©sultats de d√©tection YOLO"""
    print("üîç R√âSULTATS DE D√âTECTION YOLO")
    print("=" * 50)
    
    detection_file = Path("data/07_model_output/detection_results.pkl")
    if detection_file.exists():
        detections = load_pickle_file(detection_file)
        if detections:
            print(f"üìä Nombre total d'images trait√©es: {len(detections)}")
            
            # Statistiques des d√©tections
            successful_detections = [d for d in detections if d.get('bbox') is not None]
            print(f"‚úÖ D√©tections r√©ussies: {len(successful_detections)}")
            print(f"‚ùå Aucune d√©tection: {len(detections) - len(successful_detections)}")
            print(f"üìà Taux de r√©ussite: {len(successful_detections)/len(detections)*100:.1f}%")
            
            if successful_detections:
                confidences = [d['confidence'] for d in successful_detections]
                print(f"üéØ Confiance moyenne: {sum(confidences)/len(confidences):.3f}")
                print(f"üìä Confiance min/max: {min(confidences):.3f} / {max(confidences):.3f}")
                
                # Afficher quelques exemples
                print("\nüìù Exemples de d√©tections:")
                for i, detection in enumerate(successful_detections[:5]):
                    image_name = Path(detection['image_path']).name
                    conf = detection['confidence']
                    bbox = detection['bbox']
                    print(f"  {i+1}. {image_name} - Confiance: {conf:.3f} - BBox: {bbox}")
            
            print("\n" + "=" * 50)
        else:
            print("‚ùå Impossible de charger les r√©sultats de d√©tection")
    else:
        print("‚ùå Fichier de d√©tection non trouv√©")

def display_ocr_results():
    """Affiche les r√©sultats OCR"""
    print("\nüìñ R√âSULTATS OCR")
    print("=" * 50)
    
    ocr_file = Path("data/07_model_output/ocr_results.json")
    if ocr_file.exists():
        ocr_results = load_json_file(ocr_file)
        if ocr_results:
            print(f"üìä Nombre total de ROI trait√©es: {len(ocr_results)}")
            
            # Textes extraits avec succ√®s
            successful_ocr = [r for r in ocr_results if r.get('detected_text', '').strip()]
            print(f"‚úÖ Textes extraits: {len(successful_ocr)}")
            print(f"‚ùå √âchecs OCR: {len(ocr_results) - len(successful_ocr)}")
            
            if successful_ocr:
                confidences = [r['confidence'] for r in successful_ocr if 'confidence' in r]
                if confidences:
                    print(f"üéØ Confiance OCR moyenne: {sum(confidences)/len(confidences):.1f}%")
                
                # Textes les plus fr√©quents
                texts = [r['detected_text'] for r in successful_ocr]
                text_counts = {}
                for text in texts:
                    text_counts[text] = text_counts.get(text, 0) + 1
                
                print("\nüìù Textes d√©tect√©s les plus fr√©quents:")
                sorted_texts = sorted(text_counts.items(), key=lambda x: x[1], reverse=True)
                for text, count in sorted_texts[:10]:
                    print(f"  '{text}' : {count} fois")
                
                print("\nüìã Exemples de textes extraits:")
                for i, result in enumerate(successful_ocr[:10]):
                    image_name = Path(result['image_path']).name
                    text = result['detected_text']
                    conf = result.get('confidence', 0)
                    print(f"  {i+1}. {image_name} ‚Üí '{text}' (confiance: {conf:.1f}%)")
            
            print("\n" + "=" * 50)
        else:
            print("‚ùå Impossible de charger les r√©sultats OCR")
    else:
        print("‚ùå Fichier OCR non trouv√©")

def display_final_report():
    """Affiche le rapport final"""
    print("\nüìà RAPPORT FINAL")
    print("=" * 50)
    
    report_file = Path("data/08_reporting/final_report.json")
    if report_file.exists():
        report = load_json_file(report_file)
        if report:
            # R√©sum√© du pipeline
            if 'pipeline_summary' in report:
                summary = report['pipeline_summary']
                print("üöÄ R√âSUM√â DU PIPELINE:")
                print(f"  üìä Images trait√©es: {summary.get('total_images_processed', 'N/A')}")
                print(f"  üîç Taux d√©tection: {summary.get('detection_success_rate', 0)*100:.1f}%")
                print(f"  üìñ Taux OCR: {summary.get('ocr_success_rate', 0)*100:.1f}%")
                print(f"  üéØ Succ√®s end-to-end: {summary.get('end_to_end_success_rate', 0)*100:.1f}%")
            
            # Configuration utilis√©e
            if 'configuration_used' in report:
                config = report['configuration_used']
                print(f"\n‚öôÔ∏è CONFIGURATION:")
                print(f"  üéØ Seuil confiance YOLO: {config.get('yolo_confidence_threshold', 'N/A')}")
                print(f"  üìñ Langue OCR: {config.get('ocr_language', 'N/A')}")
                print(f"  üîç Confiance OCR min: {config.get('ocr_min_confidence', 'N/A')}")
            
            # Recommandations
            if 'recommendations' in report and report['recommendations']:
                print(f"\nüí° RECOMMANDATIONS:")
                for i, rec in enumerate(report['recommendations'], 1):
                    print(f"  {i}. {rec}")
            
            print("\n" + "=" * 50)
        else:
            print("‚ùå Impossible de charger le rapport final")
    else:
        print("‚ùå Rapport final non trouv√©")

def display_evaluation_metrics():
    """Affiche les m√©triques d'√©valuation"""
    print("\nüìä M√âTRIQUES D'√âVALUATION")
    print("=" * 50)
    
    metrics_file = Path("data/08_reporting/evaluation_metrics.json")
    if metrics_file.exists():
        metrics = load_json_file(metrics_file)
        if metrics:
            print("üéØ M√âTRIQUES DISPONIBLES:")
            for key, value in metrics.items():
                if isinstance(value, (int, float)):
                    if key.endswith('_rate') or key.endswith('_ratio'):
                        print(f"  {key}: {value*100:.1f}%")
                    else:
                        print(f"  {key}: {value}")
                else:
                    print(f"  {key}: {value}")
            print("\n" + "=" * 50)
        else:
            print("‚ùå Impossible de charger les m√©triques")
    else:
        print("‚ùå M√©triques non trouv√©es")

def create_summary_visualization():
    """Cr√©e une visualisation des r√©sultats"""
    try:
        # Charger les donn√©es
        detection_file = Path("data/07_model_output/detection_results.pkl")
        ocr_file = Path("data/07_model_output/ocr_results.json")
        
        if detection_file.exists() and ocr_file.exists():
            detections = load_pickle_file(detection_file)
            ocr_results = load_json_file(ocr_file)
            
            if detections and ocr_results:
                # Cr√©er un graphique simple
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
                
                # Graphique 1: R√©partition des d√©tections
                successful_det = len([d for d in detections if d.get('bbox') is not None])
                failed_det = len(detections) - successful_det
                
                ax1.pie([successful_det, failed_det], 
                       labels=['D√©tections r√©ussies', '√âchecs'], 
                       autopct='%1.1f%%',
                       colors=['#2ecc71', '#e74c3c'])
                ax1.set_title('R√©partition des d√©tections YOLO')
                
                # Graphique 2: R√©partition OCR
                successful_ocr = len([r for r in ocr_results if r.get('detected_text', '').strip()])
                failed_ocr = len(ocr_results) - successful_ocr
                
                ax2.pie([successful_ocr, failed_ocr], 
                       labels=['OCR r√©ussi', '√âchecs'], 
                       autopct='%1.1f%%',
                       colors=['#3498db', '#f39c12'])
                ax2.set_title('R√©partition des r√©sultats OCR')
                
                plt.tight_layout()
                plt.savefig('data/08_reporting/results_summary.png', dpi=300, bbox_inches='tight')
                print("üìä Graphique sauvegard√©: data/08_reporting/results_summary.png")
                plt.show()
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du graphique: {e}")

def main():
    """Fonction principale"""
    print("üîç VISUALISATION DES R√âSULTATS DU PIPELINE KEDRO")
    print("=" * 60)
    
    # V√©rifier que les dossiers existent
    output_dir = Path("data/07_model_output")
    reporting_dir = Path("data/08_reporting")
    
    if not output_dir.exists():
        print("‚ùå Dossier de sortie non trouv√©. Avez-vous lanc√© le pipeline ?")
        return
    
    # Afficher tous les r√©sultats
    display_detection_results()
    display_ocr_results()
    display_evaluation_metrics()
    display_final_report()
    
    # Cr√©er une visualisation
    print("\nüìä Cr√©ation d'une visualisation...")
    create_summary_visualization()
    
    print("\n‚úÖ Analyse termin√©e !")
    print("üí° Consultez aussi le fichier: data/08_reporting/results_summary.png")

if __name__ == "__main__":
    main()